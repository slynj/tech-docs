{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tech-Docs!","text":""},{"location":"#about","title":"About","text":"<p>This is my collection of documentations where I\u2019ve gathered everything I\u2019ve learned so far. It\u2019s a mix of things I\u2019ve explored, built, and found useful along the way. I'll try to keep it updated regularly with new topics and concepts :&gt;    Most of the documents were originally written as a reference for myself, so I can revisit and recall things when needed. Completely open to suggestions and improvements! </p>"},{"location":"#whats-inside","title":"What\u2019s Inside?","text":"<ul> <li> <p>5G Networks    Open5GS, UERANSIM, full end-to-end 5G deployment, and etc.</p> </li> <li> <p>Docker    Containerization, managing Docker images, and Docker Compose.</p> </li> <li> <p>Linux Commands    Useful commands.</p> </li> <li> <p>Machine Learning   Visualization, Algorithms, and etc.</p> </li> <li> <p>And More! (hopefully) </p> </li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>Email: l2jeong@uwaterloo.ca Website: lynjeong.com </p>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/","title":"5G Core - Building Open5GS","text":"<p>This guide will walk you through installing Open5Gs in Ubuntu environment. Please check the official document for other environments as you might need to build from source.</p>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#1-getting-mongodb","title":"1. Getting MongoDB","text":"<p>Import the public key used by the package management system.</p> <pre><code>sudo apt update\nsudo apt install gnupg\ncurl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor\n</code></pre> <p>Create the list file /etc/apt/sources.list.d/mongodb-org-6.0.list for your version of Ubuntu.</p> <p>On ubuntu 22.04 (Jammy):</p> <pre><code>echo \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list\n</code></pre>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#2-installing-open5gs","title":"2. Installing Open5GS","text":"<p>Install Open5GS using <code>apt</code></p> <pre><code>sudo add-apt-repository ppa:open5gs/latest\nsudo apt update\nsudo apt install open5gs\n</code></pre> <p>Verify that it\u2019s running</p> <pre><code>ps aux | grep open5gs\n</code></pre> <p></p>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#3-install-the-webui-of-open5gs","title":"3. Install the WebUI of Open5GS","text":"<p>The WebUI allows you to interactively edit subscriber data. </p> <p>Install <code>Node.js</code></p> <pre><code> # Download and import the Nodesource GPG key\n sudo apt update\n sudo apt install -y ca-certificates curl gnupg\n sudo mkdir -p /etc/apt/keyrings\n curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n\n # Create deb repository\n NODE_MAJOR=20\n echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list\n\n # Run Update and Install\n sudo apt update\n sudo apt install nodejs -y\n</code></pre> <p>Install WebUI</p> <pre><code>curl -fsSL https://open5gs.org/open5gs/assets/webui/install | sudo -E bash -\n</code></pre> <p>Now when you goto <code>http://localhost:9999</code>  you should be able the see the graphical UI like below.</p> <p>Start WebUI</p> <pre><code>sudo systemctl start open5gs-webui\n</code></pre> <p>OPTIONALLY If you want to access the webUI from another machine, you can modify the <code>index.js</code> file to listen to <code>0.0.0.0</code>.</p> <ol> <li> <p>Locate where the <code>index.js</code> is at. </p> <pre><code>find / -name \"open5gs\" -type d 2&gt;/dev/null\n</code></pre> <p></p> <p>Check the directories listed and find the <code>server</code> directory which is where the js file is in. Typically located in <code>/usr/lib/node_modules/open5gs/server/index.js</code></p> </li> <li> <p>Modify the <code>listen</code> call to bind to <code>0.0.0.0</code>'</p> <pre><code>sudo nano /usr/lib/node_modules/open5gs/server/index.js\n</code></pre> <p></p> </li> <li> <p>Optionally test with <code>curl</code></p> <pre><code>curl 192.168.1.6:9999\n</code></pre> <p></p> </li> <li> <p>Connect to it on the machine. For me it was <code>http:://192.168.1.6:9999</code></p> </li> </ol>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#4-configuring-open5gs","title":"4. Configuring Open5GS","text":"<p>Now that you\u2019ve installed Open5GS, you need to modify the configuration and set up your network for proper functionality. Here\u2019s a brief overview:</p> <ol> <li>Modify configuration files<ul> <li>Update the <code>*.yaml</code> files for each component in the <code>/etc/open5gs/</code> directory</li> <li>Configure IP addresses, PLMN (Public Land Mobile Network) IDs, and other settings to match your deployment. Note that Open5GS comes ready to run on one machine, only modify IP addresses if your UE &amp; gNB is on a different machine.</li> <li>You will need to modify the PLMN in your NRF and AMF config, and in case of AMF, further modify the TAC information.</li> <li>If you are aiming to connect an external gNB to your core, you will also need to change the NGAP bind address of the AMF\u00a0and\u00a0the GTPU bind address of the UPF. If you are running an gNB stack locally, you will not need to make these changes.</li> </ul> </li> <li>Add Subscriber Data<ul> <li>Enter your UE details like IMSI, keys, and APNs using the WebUI (or CLI)</li> </ul> </li> </ol>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#nrfyaml","title":"nrf.yaml","text":"<p>Modify\u00a0<code>/etc/open5gs/nrf.yaml</code>\u00a0to set the PLMN ID.</p> <pre><code>nrf:\n  serving:  # 5G roaming requires PLMN in NRF\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n</code></pre>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#amfyaml","title":"amf.yaml","text":"<p>Modify\u00a0<code>/etc/open5gs/amf.yaml</code>\u00a0to set the NGAP IP address, PLMN ID, TAC and NSSAI.</p> <pre><code>ngap:\n    server:\n      - address: 127.0.0.5\n  metrics:\n    server:\n      - address: 127.0.0.5\n        port: 9090\n  guami:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      amf_id:\n        region: 2\n        set: 1\n  tai:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      tac: 1\n  plmn_support:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      s_nssai:\n        - sst: 1\n</code></pre>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#upfyaml","title":"upf.yaml","text":"<p>Modify <code>/etc/open5gs/upf.yaml</code> to set the GTP-U address.</p> <pre><code>     gtpu:\n       server:\n        - address: 127.0.0.7\n     session:\n       - subnet: 10.45.0.1/16\n       - subnet: 2001:db8:cafe::1/48\n</code></pre> <p>After configuring, restart the daemons.</p> <pre><code>sudo systemctl restart open5gs-nrfd\nsudo systemctl restart open5gs-amfd\nsudo systemctl restart open5gs-upfd\n</code></pre>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#5-registering-subscriber-information","title":"5. Registering Subscriber Information","text":"<p>Connect and login with admin account</p> <pre><code>ID: admin\nPWD: 1423\n</code></pre> <p></p> <p>Add subscriber information</p> <ol> <li> <p>Go to <code>subscriber</code> Menu</p> <p></p> </li> <li> <p>Click <code>+</code> button to add a new subscriber</p> </li> <li> <p>Fill the IMSI, security context(K, OPc, AMF), and APN of the subscriber</p> <p></p> </li> <li> <p>Click <code>SAVE</code> </p> </li> </ol>"},{"location":"5G-Network/5G%20Core%20-%20Building%20Open5GS%2017e011ff45b98048a6aff1a15e6d60a5/#6-uninstalling-open5gs-and-webui","title":"6. Uninstalling Open5GS and WebUI","text":"<p>Remove the Open5GS packages.</p> <pre><code>sudo apt purge open5gs\nsudo apt autoremove\n</code></pre> <p>Remove the logs as well.</p> <pre><code>sudo rm -Rf /var/log/open5gs\n</code></pre> <p>Remove the WebUI.</p> <pre><code>curl -fsSL https://open5gs.org/open5gs/assets/webui/uninstall | sudo -E bash -\n</code></pre> <p></p> <p>RESROUCES: Open5Gs Official Documentation</p>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/","title":"5G UE &amp; RAN - Building UERANSIM","text":""},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#1-requirements","title":"1. Requirements","text":"Requirements Version Ubuntu 16.04 or later CMake 3.17 or later gcc 9.0.0 or later g++ 9.0.0 or later <p>check the versions</p> <pre><code>lsb_release -a    # ubuntu version check\ncmake --version   # cmake version check\ngcc --version     # gcc version check\ng++ --version     # g++ version check\n</code></pre>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#2-getting-ueransim","title":"2. Getting UERANSIM","text":""},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#git-clone","title":"Git Clone","text":"<pre><code>cd ~\ngit clone https://github.com/aligungr/UERANSIM\n</code></pre>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#dependencies","title":"Dependencies","text":"<p>update &amp; upgrade apt</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> <p>install dependencies</p> <pre><code>sudo apt install make\nsudo apt install gcc\nsudo apt install g++\nsudo apt install libsctp-dev lksctp-tools\nsudo apt install iproute2\nsudo snap install cmake --classic\n</code></pre>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#3-building-ueransim","title":"3. Building UERANSIM","text":"<pre><code>cd ~/UERANSIM\nmake\n</code></pre> <p>After the build, you should be able to see the binaries under <code>~/UERANSIM/build</code> folder. You should see the following files:</p> <ol> <li>nr-gnb\u00a0| Main executable for 5G gNB (RAN)</li> <li>nr-ue\u00a0| Main executable for 5G UE</li> <li>nr-cli\u00a0| CLI tool for 5G gNB and UE</li> <li>nr-binder\u00a0| A tool for utilizing UE's internet connectivity.</li> <li>libdevbnd.so\u00a0| A dynamic library for nr-binder</li> </ol> <p></p>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#4-configuring-ue-and-gnb","title":"4. Configuring UE and gNB","text":"<ul> <li><code>nr-ue</code>\u00a0accepts a UE configuration file as a parameter</li> <li><code>nr-gnb</code>\u00a0accepts a gNB configuration file as a parameter</li> </ul> <pre><code>nr-ue -c myconfig1.yaml\nnr-gnb -c myconfig2.yaml\n</code></pre> <p>Under the <code>config</code> folder, there are example configuration files provided by UERANSIM. You can either edit them, or write your own files.</p>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#ue-configuration","title":"UE Configuration","text":"<p>I will be editing <code>open5gs-ue.yaml</code> file for my UE configuration. Refer to the configuration page below for details.</p> <p>Configuration</p> <p>I modified <code>supi</code>, <code>mcc</code>, <code>mnc</code> value. Make sure your <code>supi</code> value has the corresponding <code>mcc</code> and <code>mnc</code> value.</p> <pre><code>supi: 'imsi-001010000000001'\n# Mobile Country Code value of HPLMN\nmcc: '001'\n# Mobile Network Code value of HPLMN (2 or 3 digits)\nmnc: '01'\n</code></pre> <p>Note that the <code>subscription key</code>, <code>OP</code> code, and <code>amf</code> values for registration is in this <code>yaml</code> file as well.</p> <code>open5gs-ue.yaml</code> <pre><code># IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 digits)\nsupi: 'imsi-001010000000001'\n# Mobile Country Code value of HPLMN\nmcc: '001'\n# Mobile Network Code value of HPLMN (2 or 3 digits)\nmnc: '01'\n# SUCI Protection Scheme : 0 for Null-scheme, 1 for Profile A and 2 for Profile B\nprotectionScheme: 0\n# Home Network Public Key for protecting with SUCI Profile A\nhomeNetworkPublicKey: '5a8d38864820197c3394b92613b20b91633cbd897119273bf8e4a6f4eec0a650'\n# Home Network Public Key ID for protecting with SUCI Profile A\nhomeNetworkPublicKeyId: 1\n# Routing Indicator\nroutingIndicator: '0000'\n\n# Permanent subscription key\nkey: '465B5CE8B199B49FAA5F0A2EE238A6BC'\n# Operator code (OP or OPC) of the UE\nop: 'E8ED289DEBA952E4283B54E88E6183CA'\n# This value specifies the OP type and it can be either 'OP' or 'OPC'\nopType: 'OPC'\n# Authentication Management Field (AMF) value\namf: '8000'\n# IMEI number of the device. It is used if no SUPI is provided\nimei: '356938035643803'\n# IMEISV number of the device. It is used if no SUPI and IMEI is provided\nimeiSv: '4370816125816151'\n</code></pre>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#gnb-configuration","title":"gNB Configuration","text":"<p>I will be editing <code>open5gs-gnb.yaml</code> file for my gNB configuration. I modified <code>mcc</code> and <code>mnc</code> in here as well matching the ue config file.</p> <pre><code>mcc: '001'          # Mobile Country Code value\nmnc: '01'           # Mobile Network Code value (2 or 3 digits)\n</code></pre> <p>AMF\u2019s address must also be changed if you use gNB and AMF in different machines.</p> <pre><code>amfConfigs:\n  - address: 127.0.0.5\n    port: 38412\n</code></pre> <code>open5gs-gnb.yaml</code> <pre><code>mcc: '001'          # Mobile Country Code value\nmnc: '01'           # Mobile Network Code value (2 or 3 digits)\n\nnci: '0x000000010'  # NR Cell Identity (36-bit)\nidLength: 32        # NR gNB ID length in bits [22...32]\ntac: 1              # Tracking Area Code\n\nlinkIp: 127.0.0.1   # gNB's local IP address for Radio Link Simulation (Usually same with local IP)\nngapIp: 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\ngtpIp: 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n# List of AMF address information\namfConfigs:\n  - address: 127.0.0.5\n    port: 38412\n\n# List of supported S-NSSAIs by this gNB\nslices:\n  - sst: 1\n\n# Indicates whether or not SCTP stream number errors should be ignored.\nignoreStreamIds: true\n</code></pre>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#connection-check","title":"Connection Check","text":"<p>After all the configuration, make sure to check that all of the nodes in your setup (UE, gNB, and core network) can connect to each other over the network. One option is to <code>ping</code> it.</p>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#5-starting-ue-and-gnb","title":"5. Starting UE and gNB","text":"<p>Run the following command to start the gNB.</p> <pre><code>nr-gnb -c &lt;your-config file&gt;.yaml\n</code></pre> <p>Run the following command to start a UE.</p> <pre><code>nr-ue -c &lt;your-config file&gt;.yaml\n</code></pre> <p>You can also adjust the number of UEs. Below will start 10 UEs with their IMSI number incremented by one for each of the UEs (starting from the IMSI specified in the config file).</p> <pre><code>nr-ue -c &lt;your-config file&gt;.yaml -n 10\n</code></pre> <p>You can also override IMSI parameter in the config file over the command line.</p> <pre><code>nr-ue -c &lt;your-config file&gt;.yaml -i imsi-286010000000001\n</code></pre> <pre><code>nr-ue -c &lt;your-config file&gt;.yaml -n 10 -i imsi-286010000000001\n</code></pre>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#other-cli-commands","title":"Other CLI Commands","text":"<p>You can use\u00a0<code>nr-cli</code>\u00a0tool for both gNB and UEs.</p> <p>You can query the current UE and gNBs in the environment using <code>--dump</code> option.</p> <pre><code>nr-cli --dump\n</code></pre> <p></p> <p>Now you know the names, so if you run <code>nr-cli &lt;node-name&gt;</code>, you can execute more commands about this node in an interactive shell.</p> <pre><code>nr-cli UERANSIM-gnb-1-1-1\n</code></pre> <p>If you enter <code>commands</code>, you can see the available commands. Note that the commands available for gNB are different from the ones for UE.</p> <p></p>"},{"location":"5G-Network/5G%20UE%20%26%20RAN%20with%20UERANSIM%2017e011ff45b98023b13bc0a753286816/#restarting-ueransim-cleanly","title":"Restarting UERANSIM Cleanly","text":"<p>When there are duplicate entries of the identical UE like shown below, you can kill the process and start again.</p> <p></p> <p>Kill the process</p> <pre><code>sudo pkill nr-ue\n</code></pre> <p>Run again</p> <pre><code>sudo ./nr-ue -c ../config/open5gs-ue.yaml\n</code></pre> <p>Now there should only be one</p> <p></p> <p>RESOURCES: UERANSIM Official Documentation</p>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/","title":"5G end-to-end Build and Deployment with UERANSIM &amp; Open5GS","text":""},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#1-requirements","title":"1. Requirements","text":"Requirements Version  Operating System Ubuntu (Recommended: 20.04 or 22.04 LTS)   Alternatively, other Linux distributions with package management support (e.g., Debian) may work but require adjustments."},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#2-build-5g-core","title":"2. Build 5G Core","text":"<p>Follow the steps in the page below; stop when you see the configuration steps.</p> <p>5G Core - Building Open5GS </p>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#3-5g-core-configuration","title":"3. 5G Core Configuration","text":"<p>Now that you\u2019ve installed Open5GS, you need to modify the configuration and set up your network for proper functionality. </p> <p>You will need to modify the PLMN in your NRF and AMF config, and in case of AMF, further modify the TAC information. </p> <p>If you are aiming to connect an external gNB to your core, you will also need to change the NGAP bind address of the AMF\u00a0and\u00a0the GTPU bind address of the UPF. If you are running an gNB stack locally, you will not need to make these changes.</p>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#amfyaml","title":"amf.yaml","text":"<p>The AMF (Access and Mobility Function) communicates with the gNB over the N2 interface. It manages 5G NAS (Non-Access Stratum) messaging, which is used by UEs to request data services, handle handovers between gNB during movement, and authenticate to the network.</p> <p>By default, the AMF binds to a loopback IP address. You won\u2019t have to modify it if everything runs on the same machine, but modifications should be made for real gNBs or running UERANSIM on a different device.</p> <p>Modify\u00a0<code>/etc/open5gs/amf.yaml</code>\u00a0to set the NGAP IP address, PLMN ID, TAC and NSSAI.</p> <pre><code>ngap:\n    server:\n      - address: 127.0.0.5\n  metrics:\n    server:\n      - address: 127.0.0.5\n        port: 9090\n  guami:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      amf_id:\n        region: 2\n        set: 1\n  tai:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      tac: 1\n  plmn_support:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      s_nssai:\n        - sst: 1\n</code></pre> <code>amf.yaml</code> <pre><code>logger:\n  file:\n    path: /var/log/open5gs/amf.log\n#  level: info   # fatal|error|warn|info(default)|debug|trace\n\nglobal:\n  max:\n    ue: 1024  # The number of UE can be increased depending on memory size.\n#    peer: 64\n\namf:\n  sbi:\n    server:\n      - address: 127.0.0.5\n        port: 7777\n    client:\n#      nrf:\n#        - uri: http://127.0.0.10:7777\n      scp:\n        - uri: http://127.0.0.200:7777\n  ngap:\n    server:\n      - address: 127.0.0.5\n  metrics:\n    server:\n      - address: 127.0.0.5\n        port: 9090\n  guami:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      amf_id:\n        region: 2\n        set: 1\n  tai:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      tac: 1\n  plmn_support:\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n      s_nssai:\n        - sst: 1\n  security:\n    integrity_order : [ NIA2, NIA1, NIA0 ]\n    ciphering_order : [ NEA0, NEA1, NEA2 ]\n  network_name:\n    full: Open5GS\n    short: Next\n  amf_name: open5gs-amf0\n  time:\n#    t3502:\n#      value: 720   # 12 minutes * 60 = 720 seconds\n    t3512:\n      value: 540    # 9 minutes * 60 = 540 seconds\n\n################################################################################\n# SBI Server\n################################################################################\n#  o Override SBI address to be advertised to NRF\n#  sbi:\n#    server:\n#      - dev:eth0\n#        advertise: open5gs-amf.svc.local\n#\n#  sbi:\n#    server:\n#      - address: localhost\n#        advertise:\n#          - 127.0.0.99\n#          - ::1\n#\n################################################################################\n# SBI Client\n################################################################################\n#  o Direct communication with NRF interaction\n#  sbi:\n#    client:\n#      nrf:\n#        - uri: http://127.0.0.10:7777\n#\n#  o Indirect communication with delegated discovery\n#  sbi:\n#    client:\n#      scp:\n#        - uri: http://127.0.0.200:7777\n#\n#  o Indirect communication without delegated discovery\n#  sbi:\n#    client:\n#      nrf:\n#        - uri: http://127.0.0.10:7777\n#      scp:\n#        - uri: http://127.0.0.200:7777\n#  discovery:\n#    delegated: no\n#\n################################################################################\n# HTTPS scheme with TLS\n################################################################################\n#  o Set as default if not individually set\n#  default:\n#    tls:\n#      server:\n#        scheme: https\n#        private_key: /etc/open5gs/tls/amf.key\n#        cert: /etc/open5gs/tls/amf.crt\n#      client:\n#        scheme: https\n#        cacert: /etc/open5gs/tls/ca.crt\n#  sbi:\n#    server:\n#      - address: amf.localdomain\n#    client:\n#      nrf:\n#        - uri: https://nrf.localdomain\n#\n#  o Add client TLS verification\n#  default:\n#    tls:\n#      server:\n#        scheme: https\n#        private_key: /etc/open5gs/tls/amf.key\n#        cert: /etc/open5gs/tls/amf.crt\n#        verify_client: true\n#        verify_client_cacert: /etc/open5gs/tls/ca.crt\n#      client:\n#        scheme: https\n#        cacert: /etc/open5gs/tls/ca.crt\n#        client_private_key: /etc/open5gs/tls/amf.key\n#        client_cert: /etc/open5gs/tls/amf.crt\n#  sbi:\n#    server:\n#      - address: amf.localdomain\n#    client:\n#      nrf:\n#        - uri: https://nrf.localdomain\n#\n################################################################################\n# NGAP Server\n################################################################################\n#  o Listen on address available in `eth0` interface\n#  ngap:\n#    server:\n#      - dev: eth0\n#\n################################################################################\n# 3GPP Specification\n################################################################################\n#  o GUAMI\n#  guami:\n#    - plmn_id:\n#        mcc: 999\n#        mnc: 70\n#      amf_id:\n#        region: 2\n#        set: 1\n#        pointer: 4\n#    - plmn_id:\n#        mcc: 001\n#        mnc: 01\n#      amf_id:\n#        region: 5\n#        set: 2\n#\n#  o TAI\n#  tai:\n#    - plmn_id:\n#        mcc: 001\n#        mnc: 01\n#      tac: [1, 3, 5]\n#  tai:\n#    - plmn_id:\n#        mcc: 002\n#        mnc: 02\n#      tac: [6-10, 15-18]\n#  tai:\n#    - plmn_id:\n#        mcc: 003\n#        mnc: 03\n#      tac: 20\n#    - plmn_id:\n#        mcc: 004\n#        mnc: 04\n#      tac: 21\n#  tai:\n#    - plmn_id:\n#        mcc: 005\n#        mnc: 05\n#      tac: [22, 28]\n#    - plmn_id:\n#        mcc: 006\n#        mnc: 06\n#      tac: [30-32, 34, 36-38, 40-42, 44, 46, 48]\n#    - plmn_id:\n#        mcc: 007\n#        mnc: 07\n#      tac: 50\n#    - plmn_id:\n#        mcc: 008\n#        mnc: 08\n#      tac: 60\n#    - plmn_id:\n#        mcc: 009\n#        mnc: 09\n#      tac: [70, 80]\n#\n#  o PLMN Support\n#  plmn_support:\n#    - plmn_id:\n#        mcc: 999\n#        mnc: 70\n#      s_nssai:\n#        - sst: 1\n#          sd: 010000\n#    - plmn_id:\n#        mcc: 999\n#        mnc: 70\n#      s_nssai:\n#        - sst: 1\n#\n#  o Access Control\n#  access_control:\n#    - default_reject_cause: 13\n#    - plmn_id:\n#        reject_cause: 15\n#        mcc: 001\n#        mnc: 01\n#    - plmn_id:\n#        mcc: 002\n#        mnc: 02\n#    - plmn_id:\n#        mcc: 999\n#        mnc: 70\n#\n#  o Relative Capacity\n#  relative_capacity: 100\n</code></pre>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#nrfyaml","title":"nrf.yaml","text":"<p>Modify\u00a0<code>/etc/open5gs/nrf.yaml</code>\u00a0to set the PLMN ID if you modified it.</p> <pre><code>nrf:\n  serving:  # 5G roaming requires PLMN in NRF\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n</code></pre> <code>nrf.yaml</code> <pre><code>logger:\n  file:\n    path: /var/log/open5gs/nrf.log\n#  level: info   # fatal|error|warn|info(default)|debug|trace\n\nglobal:\n  max:\n    ue: 1024  # The number of UE can be increased depending on memory size.\n#    peer: 64\n\nnrf:\n  serving:  # 5G roaming requires PLMN in NRF\n    - plmn_id:\n        mcc: 001\n        mnc: 01\n  sbi:\n    server:\n      - address: 127.0.0.10\n        port: 7777\n\n################################################################################\n# SBI Server\n################################################################################\n#  o Override SBI address to be advertised to NRF\n#  sbi:\n#    server:\n#      - dev: eth0\n#        advertise: open5gs-nrf.svc.local\n#\n#  sbi:\n#    server:\n#      - address: localhost\n#        advertise:\n#          - 127.0.0.99\n#          - ::1\n#\n################################################################################\n# HTTPS scheme with TLS\n################################################################################\n#  o Set as default if not individually set\n#  default:\n#    tls:\n#      server:\n#        scheme: https\n#        private_key: /etc/open5gs/tls/nrf.key\n#        cert: /etc/open5gs/tls/nrf.crt\n#      client:\n#        scheme: https\n#        cacert: /etc/open5gs/tls/ca.crt\n#  sbi:\n#    server:\n#      - address: nrf.localdomain\n#\n#  o Add client TLS verification\n#  default:\n#    tls:\n#      server:\n#        scheme: https\n#        private_key: /etc/open5gs/tls/nrf.key\n#        cert: /etc/open5gs/tls/nrf.crt\n#        verify_client: true\n#        verify_client_cacert: /etc/open5gs/tls/ca.crt\n#      client:\n#        scheme: https\n#        cacert: /etc/open5gs/tls/ca.crt\n#        client_private_key: /etc/open5gs/tls/nrf.key\n#        client_cert: /etc/open5gs/tls/nrf.crt\n#  sbi:\n#    server:\n#      - address: nrf.localdomain\n</code></pre>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#upfyaml","title":"upf.yaml","text":"<p>Modify <code>/etc/open5gs/upf.yaml</code> to set the GTP-U address if you need to.</p> <pre><code>     gtpu:\n       server:\n        - address: 127.0.0.7\n     session:\n       - subnet: 10.45.0.1/16\n       - subnet: 2001:db8:cafe::1/48\n</code></pre> <code>upf.yaml</code> <pre><code>logger:\n  file:\n    path: /var/log/open5gs/upf.log\n#  level: info   # fatal|error|warn|info(default)|debug|trace\n\nglobal:\n  max:\n    ue: 1024  # The number of UE can be increased depending on memory size.\n#    peer: 64\n\nupf:\n  pfcp:\n    server:\n      - address: 127.0.0.7\n    client:\n#      smf:     #  UPF PFCP Client try to associate SMF PFCP Server\n#        - address: 127.0.0.4\n  gtpu:\n    server:\n      - address: 127.0.0.7\n  session:\n    - subnet: 10.45.0.0/16\n      gateway: 10.45.0.1\n    - subnet: 2001:db8:cafe::/48\n      gateway: 2001:db8:cafe::1\n  metrics:\n    server:\n      - address: 127.0.0.7\n        port: 9090\n\n################################################################################\n# PFCP Server\n################################################################################\n# o Override PFCP address to be advertised to SMF in PFCP association\n#  pfcp:\n#    server:\n#      - dev: eth0\n#        advertise: open5gs-upf.svc.local\n#\n################################################################################\n# GTP-U Server\n################################################################################\n#  o Override SGW-U GTP-U address to be advertised inside S1AP messages\n#  gtpu:\n#    server:\n#      - dev: ens3\n#        advertise: upf1.5gc.mnc001.mcc001.3gppnetwork.org\n#\n#  o User Plane IP Resource information\n#  gtpu:\n#    server:\n#      - address:\n#        - 127.0.0.7\n#        - ::1\n#        teid_range_indication: 4\n#        teid_range: 10\n#        network_instance: internet\n#        source_interface: 0\n#      - address: 127.0.10.4\n#        teid_range_indication: 4\n#        teid_range: 5\n#        network_instance: ims\n#        source_interface: 1\n#\n################################################################################\n# 3GPP Specification\n################################################################################\n#\n#  o Specific DNN/APN(e.g 'ims') uses 10.46.0.1/16, 2001:db8:babe::1/48\n#  $ sudo ip addr add 10.45.0.1/16 dev ogstun\n#  $ sudo ip addr add 2001:db8:cafe::1/48 dev ogstun2\n#  $ sudo ip addr add 10.46.0.1/16 dev ogstun3\n#  $ sudo ip addr add 2001:db8:babe::1/48 dev ogstun3\n#\n#  session:\n#    - subnet: 10.45.0.0/16\n#      gateway: 10.45.0.1\n#      dnn: internet\n#    - subnet: 2001:db8:cafe::/48\n#      dnn: internet\n#      dev: ogstun2\n#    - subnet: 10.46.0.0/16\n#      gateway: 10.46.0.1\n#      dnn: ims\n#      dev: ogstun3\n#    - subnet: 2001:db8:babe::/48\n#      dnn: ims\n#      dev: ogstun3\n</code></pre> <p>After configuring, restart the daemons.</p> <pre><code>sudo systemctl restart open5gs-nrfd\nsudo systemctl restart open5gs-amfd\nsudo systemctl restart open5gs-upfd\n</code></pre>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#5-build-configure-gnb-ue","title":"5. Build / Configure gNB &amp; UE","text":"<p>Follow the steps in the page below; follow all the configuration steps.</p> <p>5G UE &amp; RAN with UERANSIM </p> <code>open5gs-ue.yaml</code> <pre><code># IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 digits)\nsupi: 'imsi-001010000000001'\n# Mobile Country Code value of HPLMN\nmcc: '001'\n# Mobile Network Code value of HPLMN (2 or 3 digits)\nmnc: '01'\n# SUCI Protection Scheme : 0 for Null-scheme, 1 for Profile A and 2 for Profile B\nprotectionScheme: 0\n# Home Network Public Key for protecting with SUCI Profile A\nhomeNetworkPublicKey: '5a8d38864820197c3394b92613b20b91633cbd897119273bf8e4a6f4eec0a650'\n# Home Network Public Key ID for protecting with SUCI Profile A\nhomeNetworkPublicKeyId: 1\n# Routing Indicator\nroutingIndicator: '0000'\n\n# Permanent subscription key\nkey: '465B5CE8B199B49FAA5F0A2EE238A6BC'\n# Operator code (OP or OPC) of the UE\nop: 'E8ED289DEBA952E4283B54E88E6183CA'\n# This value specifies the OP type and it can be either 'OP' or 'OPC'\nopType: 'OPC'\n# Authentication Management Field (AMF) value\namf: '8000'\n# IMEI number of the device. It is used if no SUPI is provided\nimei: '356938035643803'\n# IMEISV number of the device. It is used if no SUPI and IMEI is provided\nimeiSv: '4370816125816151'\n\n# List of gNB IP addresses for Radio Link Simulation\ngnbSearchList:\n  - 127.0.0.1\n\n# UAC Access Identities Configuration\nuacAic:\n  mps: false\n  mcs: false\n\n# UAC Access Control Class\nuacAcc:\n  normalClass: 0\n  class11: false\n  class12: false\n  class13: false\n  class14: false\n  class15: false\n\n# Initial PDU sessions to be established\nsessions:\n  - type: 'IPv4'\n    apn: 'internet'\n    slice:\n      sst: 1\n\n# Configured NSSAI for this UE by HPLMN\nconfigured-nssai:\n  - sst: 1\n\n# Default Configured NSSAI for this UE\ndefault-nssai:\n  - sst: 1\n    sd: 1\n\n# Supported integrity algorithms by this UE\nintegrity:\n  IA1: true\n  IA2: true\n  IA3: true\n\n# Supported encryption algorithms by this UE\nciphering:\n  EA1: true\n  EA2: true\n  EA3: true\n\n# Integrity protection maximum data rate for user plane\nintegrityMaxRate:\n  uplink: 'full'\n  downlink: 'full'\n</code></pre> <code>open5gs-gnb.yaml</code> <pre><code>mcc: '001'          # Mobile Country Code value\nmnc: '01'           # Mobile Network Code value (2 or 3 digits)\n\nnci: '0x000000010'  # NR Cell Identity (36-bit)\nidLength: 32        # NR gNB ID length in bits [22...32]\ntac: 1              # Tracking Area Code\n\nlinkIp: 127.0.0.1   # gNB's local IP address for Radio Link Simulation (Usually same with local IP)\nngapIp: 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\ngtpIp: 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n# List of AMF address information\namfConfigs:\n  - address: 127.0.0.5\n    port: 38412\n\n# List of supported S-NSSAIs by this gNB\nslices:\n  - sst: 1\n\n# Indicates whether or not SCTP stream number errors should be ignored.\nignoreStreamIds: true\n</code></pre>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#6-register-subscriber-information","title":"6. Register Subscriber Information","text":"<p>Open up Open5gs WebUI.</p> <pre><code>http://192.168.6.1:9999\n</code></pre> <p></p> <p>Connect and login with admin account</p> <pre><code>ID: admin\nPWD: 1423\n</code></pre> <p>Add subscriber information</p> <ol> <li> <p>Go to <code>subscriber</code> Menu</p> <p></p> </li> <li> <p>Click <code>+</code> button to add a new subscriber</p> </li> <li> <p>Fill the IMSI, security context(K, OPc, AMF), and APN of the subscriber</p> <p></p> <p>Make sure the information being inputed here matches with the information on the ue config file.</p> <pre><code>IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 digits)\nsupi: 'imsi-001010000000001'\n# Mobile Country Code value of HPLMN\nmcc: '001'\n# Mobile Network Code value of HPLMN (2 or 3 digits)\nmnc: '01'\n\n...\n\n# Permanent subscription key\nkey: '465B5CE8B199B49FAA5F0A2EE238A6BC'\n# Operator code (OP or OPC) of the UE\nop: 'E8ED289DEBA952E4283B54E88E6183CA'\n# This value specifies the OP type and it can be either 'OP' or 'OPC'\nopType: 'OPC'\n# Authentication Management Field (AMF) value\namf: '8000'\n</code></pre> <p></p> </li> <li> <p>Click <code>SAVE</code> </p> </li> </ol>"},{"location":"5G-Network/5G%20end-to-end%20Build%20and%20Deployment%20with%20UERANSIM%20%26%2017e011ff45b980c499b7e6dffb96bb93/#7-run-gnb-and-ue","title":"7. Run gNB and UE","text":"<p>After finishing all the configurations, start gNB and UE</p> <pre><code>nr-gnb -c ../config/open5gs-gnb.yaml &amp;\n</code></pre> <p></p> <pre><code>sudo ./nr-ue -c ../config/open5gs-ue.yaml &amp;\n</code></pre> <p></p> <p>Now everything should work, and you should see that the Initial Registration is successful.</p> <p></p> <p>You can look at the amf log to see the communications.</p> <pre><code>tail -f /var/log/open5gs/amf.log\n</code></pre> <p>You should be able to see that the UE Registration is complete here as well.</p> <p></p> <p>With <code>ifconfig</code>, you should see the session come up, and a new NIC, <code>uesimtun0</code>, on the machine.</p> <p></p> <p> RESOURCES: My first 5G Core: Open5Gs and UERANSIM</p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/","title":"Event-Driven Architecture (EDA) in C++ with RabbitMQ (SimpleAmqpClient)","text":"<p>Event-Driven Architecture (EDA) is a software design pattern where components interact and coordinate through the detection and response to events. In this context, an event refers to any change in the system\u2019s state, such as user inputs, database updates, or message exchanges. </p> <p>EDA allows an asynchronous workflow and loose coupling between system components. This helps them to work independently and react dynamically to events.</p> <p>One of the most widely used event brokers is RabbitMQ, which acts as an intermediary between event publishers and subscribers. It\u2019s responsible for routing, transforming, and filtering messages.</p> <p>RabbitMQ supports the Advanced Message Queuing Protocol (AMQP), which allows us to publish and consume messages in C++ through the SimpleAmqpClient library.</p> <p></p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#1-installation","title":"1. Installation","text":""},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#install-rabbitmq","title":"Install RabbitMQ","text":"<p>Easily install using docker</p> <pre><code>docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management\n</code></pre> <p>You should be able to see the rabbitmq container running in your docker desktop.</p> <p></p> <p>You can access RabbitMQ UI at http://localhost:15672 with ID: guest PWD: guest</p> <p></p> <p>This dashboard can be used to view current exchanges/queues and also emulate publisher/subscriber.</p> <p></p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#install-simpleamqpclient","title":"Install SimpleAmqpClient","text":"<p>SimpleAmqpClient is a C++ wrapper built on top of rabbitmq-c. It simplifies working with RabbitMQ by providing high level functions. With SimpleAmqpClient, You only need to worry about publishing messages and consuming them. The library takes care of all the low-level AMQP protocol operations behind the scenes. </p> <p>Install with homebrew</p> <pre><code>brew install simple-amqp-client\n</code></pre> <p></p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#2-create-producer","title":"2. Create Producer","text":"<p>Producer is referred to as an application or component that sends messages to a message broker. Publisher is a type of producer that specifically sends messages to an exchange in a message broker \u21d2 publisher is a subset of producer. For the simplicity of the example, I will consider that my producer = publisher, ie. it will directly send the message to an exchange. </p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#types-of-exchange","title":"Types of Exchange","text":"<p>In RabbitMQ, there are 4 types of an exchange.</p> Exchange Type Description Routing Mechanism Example Direct Exchange Sends messages to queues with a specific routing key matching the message's routing key. Exact key matching If a message with routing key <code>order.created</code> is sent, only the queue bound with <code>order.created</code> will receive it. Fanout Exchange Broadcasts messages to all queues bound to the exchange, ignoring any routing key. Broadcast to all bound queues A message announcing a system-wide event like <code>system.update</code> will be sent to all queues bound to the exchange. Topic Exchange Routes messages based on pattern matching using wildcards (<code>*</code> and <code>#</code>) in the routing key. Pattern matching A message with routing key <code>user.created</code> could be consumed by queues bound with patterns like <code>user.*</code> or <code>user.#</code>. Headers Exchange Routes messages based on matching headers instead of routing keys. Header-based filtering A message with headers <code>{ \"format\": \"pdf\", \"type\": \"invoice\" }</code> will be sent to queues expecting these headers. <p>I will use direct exchange for my example. Note that direct exchange is <code>AmqpClient::Channel::EXCHANGE_TYPE_DIRECT</code>.</p> <p></p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#publisher-code","title":"Publisher Code","text":"<pre><code>#include &lt;SimpleAmqpClient/SimpleAmqpClient.h&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    auto channel = AmqpClient::Channel::Create(\"localhost\");\n\n    channel-&gt;DeclareExchange(\"exchange_lyn\", AmqpClient::Channel::EXCHANGE_TYPE_DIRECT);\n\n    std::string message = \"Hello World~!\";\n    channel-&gt;BasicPublish(\"exchange_lyn\", \"routing_key_lyn\", AmqpClient::BasicMessage::Create(message));\n\n    std::cout &lt;&lt; \"Message sent: \" &lt;&lt; message &lt;&lt; std::endl;\n}\n</code></pre> <ul> <li><code>AmqpClient::Channel::Create()</code> Creates a channel that connects to the RabbitMQ server running on localhost. The channel is used to communicate with RabbitMQ (publishing messages, creating queues/exchanges, etc.). * The connection defaults to AMQP port <code>5672</code>.</li> <li><code>DeclareExchange(exchange_name, exchange_type)</code> Declares an exchange named with the given type.</li> <li><code>BasicPublish(exchange_name, routing_key, message)</code> Publishes the message  to the exchange  using the routing key. Since our exchange type is <code>direct</code>, it needs the routing key parameter and it will check for any queue with the exact routing key.</li> </ul>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#3-create-consumer","title":"3. Create Consumer","text":"<p>Consumer is a component or application that receives and processes messages from a queue. </p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#consumer-code","title":"Consumer Code","text":"<pre><code>#include &lt;SimpleAmqpClient/SimpleAmqpClient.h&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    auto channel = AmqpClient::Channel::Create(\"localhost\");\n\n    std::string queue_name = \"queue_lyn\";\n    channel-&gt;DeclareQueue(queue_name, false, false, false);\n    channel-&gt;BindQueue(queue_name, \"exchange_lyn\", \"routing_key_lyn\");\n\n    std::cout &lt;&lt; \"Waiting for messages...\" &lt;&lt; std::endl;\n    AmqpClient::Envelope::ptr_t envelope;\n    std::string consumer_tag = channel-&gt;BasicConsume(queue_name);\n\n    while (true) {\n        bool success = channel-&gt;BasicConsumeMessage(consumer_tag, envelope);\n\n        if (success) {\n            std::cout &lt;&lt; \"Received message: \" &lt;&lt; envelope-&gt;Message()-&gt;Body() &lt;&lt; std::endl;\n        }\n    }\n}\n</code></pre> <ul> <li><code>DeclareQueue(queue_name, passive, durable, exclusive, auto_delete)</code> Declares a queue with the following parameters. Everything else except for <code>queue_name</code> has a default value. I set <code>exclusive</code> to be false so the publisher can also access the queue.</li> <li><code>BindQueue(queue_name, exchange_name, routing_key)</code> Binds the given queue to the exchange using the routing key. When a producer publishes a message to the exchange with that routing key, the message will be delivered to the queue.</li> <li><code>AmqpClient::Envelope::ptr_t</code> Declares a ptr to an envelope obj, which will be used to store the received messages. An envelope contains the message body, headers, and routing info.</li> <li><code>BasicConsume(queue_name)</code> Starts consuming messages from the queue. It returns the consumer tag which we need to consume messages later. Note that this function must be called first in order to call <code>BasicConsumeMessage()</code> later.</li> <li><code>BasicConsumeMessage(consumer_tag, envelope)</code> Waits for the next message from the queue. If a message is received, it is stored in the envelop obj and return <code>true</code>.</li> <li><code>envelope-&gt;Message()-&gt;Body()</code> Message body.</li> </ul>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#4-running-and-testing","title":"4. Running and Testing","text":""},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#build-and-run","title":"Build and Run","text":"<p>Build and run the executable. I used the makefile below to create 2 executables: <code>producer</code> and <code>direct</code>.</p> <pre><code>CXX = g++\nCXXFLAGS = -std=c++17 -Wall -g\n\nINCLUDES = -I/usr/local/include -I/opt/homebrew/include\nLIBS = -L/usr/local/lib -L/opt/homebrew/lib -lSimpleAmqpClient -lrabbitmq -lboost_system\n\nTARGETS = producer direct\nSRCS = producer.cpp consumer.cpp\nOBJS = $(SRCS:.cpp=.o)\n\nall: $(TARGETS) clean_obj\n\nproducer: producer.cpp\n    $(CXX) $(CXXFLAGS) $(INCLUDES) producer.cpp -o producer $(LIBS)\n\ndirect: consumer.cpp\n    $(CXX) $(CXXFLAGS) $(INCLUDES) consumer.cpp -o direct $(LIBS)\n\nclean_obj:\n    rm -f $(OBJS)\n\nclean:\n    rm -f producer consumer\n\n.PHONY: all clean clean_obj\n</code></pre> <p>When you <code>make</code>, you should see 2 executables. I ran each of them in a separate terminal.</p> <p></p> <p>First run the consumer, <code>direct</code>:</p> <pre><code>./direct\n</code></pre> <p>It should display:</p> <pre><code>Waiting for messages...\n</code></pre> <p>Then run the the publisher, <code>producer</code> :</p> <pre><code>./producer\n</code></pre> <p>It should display:</p> <pre><code>Message sent: Hello World~!\n</code></pre> <p>As soon as you run the <code>producer</code>, you should be able to see on the consumer side saying that it received a message.</p> <p></p> <p></p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#navigating-the-dashboard","title":"Navigating the Dashboard","text":"<p>Visit http://localhost:15672/ to view the dashboard.</p> <p></p> <p></p> <p>Navigate to the exchanges tab, and you should be able to see the exchange we declared.</p> <p></p> <p></p> <p>Click on the exchange name, and you should be able to see the queues and their routing keys that are bound with this exchange. You can see that my <code>exchange_lyn</code> is bound with <code>queue_lyn</code> with <code>routing_key_lyn</code>. This means that when a message is sent to <code>exchange_lyn</code> with the routing key <code>routing_key_lyn</code>, it will be delivered to <code>queue_lyn</code>.</p> <p></p> <p></p> <p>Now if you navigate to the Queues and Streams tab, you should be able to see the queue you created as well.</p> <p></p> <p></p> <p>You can click on the name again and view the consumers of the queue, and the bindings.</p> <p></p> <p></p>"},{"location":"C%2B%2B/Event-Driven%20Architecture%20%28EDA%29%20in%20C%2B%2B%20with%20Rabbit%2018b011ff45b980f79c83ef50b32b2910/#testing-using-the-dashboard","title":"Testing Using the Dashboard","text":"<p>As I mentioned above, the dashboard can emulate the producer and the consumer, and create exchanger and queue using GUI. Using the dashboard, we will verify the characteristics of the direct exchange by creating another queue with the same routing key.</p> <p>In the Queues and Streams tab, click on \u201cAdd a new queue\u201d.</p> <p></p> <p></p> <p>Then enter the name of the queue. I set mine as <code>test_queue_lyn</code>. Then click on \u201cAdd queue\u201d.</p> <p></p> <p></p> <p>You should be able to see your new queue on the list. Click on the name and scroll down to the \u201cBindings\u201d section. Then enter the exchange name and routing key information. Note that they must have the same value with your other queue to achieve the goal of our testing.</p> <p></p> <p></p> <p>Click on \u201cBind\u201d and navigate to Exchanges tab. In the \u201cBindings\u201d section, you should be able to see 2 of your queues bound to the exchange with the same routing key.</p> <p></p> <p></p> <p>Now when the publisher sends a message to <code>exchange_lyn</code> with the routing key <code>routing_key_lyn</code>, both of my queues should receive the message. We can test by running the <code>producer</code> executable.</p> <pre><code>./producer\n</code></pre> <p>You should be able to see on the <code>direct</code> program that it received the message, and also the message rate graph spiking for <code>queue_lyn</code>.</p> <p></p> <p></p> <p>Now, let\u2019s check <code>test_queue_lyn</code>. You should be able to see the spike and the legend showing that there is 1 message ready.</p> <p></p> <p></p> <p>Scroll down to the \u201cGet messages\u201d section and click on \u201cGet Message(s)\u201d. You should be able to see the payload with the message that producer sent. Success! (^0^)</p> <p></p>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/","title":"Simple REST API Implementation in C++ with nghttp2, jsoncpp","text":""},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#1-requirements","title":"1. Requirements","text":"<p>Installed required libraries.</p> <pre><code>brew install jsoncpp\n</code></pre> <pre><code>brew install boost\n</code></pre> <p><code>libnghttp2_asio</code> , which has the header files we need, has been deprecated so we can no longer do it by <code>brew install nghttp2</code> and then building from there. The library has moved to\u00a0https://github.com/nghttp2/nghttp2-asio. </p> <p>Because of the above reason, we will separately install <code>nghttp-asio</code> using <code>vcpkg</code>.</p> <p>Install <code>vcpkg</code> first.</p> <pre><code>brew install vcpkg\n</code></pre> <pre><code>git clone https://github.com/microsoft/vcpkg \"$HOME/vcpkg\"\n</code></pre> <pre><code>export VCPKG_ROOT=\"$HOME/vcpkg\"\n</code></pre> <p>Install <code>nghttp-asio</code> using <code>vcpkg</code>.</p> <pre><code>vcpkg install nghttp2-asio\n</code></pre> <p>Since <code>nghttp2-asio</code> was developed with an older version of Boost, compiling it with a newer Boost version will lead to an error stating that there is no member named <code>io_service</code> in the <code>boost::asio</code> namespace. This is because, in the updated Boost, <code>io_service</code> has been replaced by <code>io_context</code>. I used a bruteforce solution and replaced all occurrences of <code>io_service</code> with <code>io_context</code> in the header file we need, <code>asio_http2_server.h</code> .</p> <p>For my setup, the file was located at <code>$HOME/dvcpkg/installed/arm64-osx/include/nghttp2/asio_http2_server.h</code>; I replaced a total of 2 occurrences.</p> <p></p> <p></p>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#2-implement-rest-api-server","title":"2. Implement REST API Server","text":"<p>Since this is a simple example for practice, I won\u2019t be adding any authentication logic. However, for actual usage, authentication (e.g., JWT, OAuth) is required. </p>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#initial-setup","title":"Initial Setup","text":"<p>First I include all necessary headers and declare namespace.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;nghttp2/asio_http2_server.h&gt;\n#include &lt;json/json.h&gt;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::server;\n</code></pre> <p>I also created a map <code>userData</code> to store the <code>userID</code> and <code>userName</code>.</p> <pre><code>std::map&lt;int, std::string&gt; userData = {\n    {753951, \"Lyn\"},\n    {574269, \"Gojo\"}\n};\n</code></pre> <p>Then define <code>getUserJson()</code> function, which returns the user data in a JSON format. Basically it converts the <code>userData</code> map into a JSON array with <code>jsoncpp</code>.</p> <pre><code>Json::Value getUsersJson() {\n    Json::Value users(Json::arrayValue);\n\n    for (const auto &amp;user : userData) {\n        Json::Value userJson;\n        userJson[\"id\"] = user.first;\n        userJson[\"name\"] = user.second;\n        users.append(userJson);\n    }\n\n    return users;\n}\n\n/*\nwill return:\n[\n    {\n        \"id\": 753951,\n        \"name\": \"Lyn\"\n    },\n    {\n        \"id\": 574269,\n        \"name\": \"Gojo\"\n    }\n]\n*/\n</code></pre>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#setup-the-server","title":"Setup the Server","text":"<p>In <code>main()</code>, I will insatiate 2 objects:</p> <pre><code>boost::system::error_code ec;\nhttp2 server;\n</code></pre> <ul> <li><code>ec</code> is an object that stores the server\u2019s error while running</li> <li><code>server</code> is our HTTP/2 object</li> </ul> <p>We will test by defining a basic endpoint and starting the server on <code>localhost:3000</code>.</p> <pre><code>server.handle(\"/\", [](const request &amp;req, const response &amp;res) {\n    res.write_head(200);\n    res.end(\"This is Lyn's Example! Hello, World :&gt;\\n\");\n});\n\nif (server.listen_and_serve(ec, \"localhost\", \"3000\")) {\n    std::cerr &lt;&lt; \"error: \" &lt;&lt; ec.message() &lt;&lt; std::endl;\n}\n</code></pre> <p>Build and run the executable. I used a Makefile below.</p> <pre><code>CXX = g++\nCXXFLAGS = -std=c++17 -Wall -Wextra -O2\n\nINCLUDES = -I/opt/homebrew/include -I/$(VCPKG_ROOT)/installed/arm64-osx/include\nLIBS = -L/opt/homebrew/lib -L/$(VCPKG_ROOT)/installed/arm64-osx/lib -lnghttp2 -lnghttp2_asio -lboost_system -ljsoncpp -lssl -lcrypto -lpthread\n\nTARGET = server\nSRCS = main.cpp\nOBJS = $(SRCS:.cpp=.o)\n\nall: $(TARGET) clean_obj\n\n$(TARGET): $(OBJS)\n    $(CXX) $(CXXFLAGS) $(OBJS) -o $@ $(LIBS) $(INCLUDES)\n\n%.o: %.cpp\n    $(CXX) $(CXXFLAGS) $(INCLUDES) -c $&lt; -o $@\n\nclean:\n    rm -f $(OBJS) $(TARGET)\n\nclean_obj:\n    rm -f $(OBJS)\n\n.PHONY: all clean\n</code></pre> <p>You can call the api with <code>cURL</code> command. Since <code>nghttp2</code> uses HTTP/2, use the <code>--http2-prior-knowledge</code> option to make an HTTP/2 request.</p> <pre><code>curl --http2-prior-knowledge -X GET http://localhost:3000/\n</code></pre> <p>The output should be:</p> <pre><code>This is Lyn's Example! Hello, World :&gt;\n</code></pre>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#define-apiusers-endpoint","title":"Define /api/users Endpoint","text":"<p>Now define an actual endpoint for the api. My example API will have an <code>/api/users</code> endpoint where caller can make GET, PUT, POST requests.</p> <pre><code>server.handle(\"/api/users\", [](const request &amp;req, const response &amp;res) {\n    ...\n});\n</code></pre> <ul> <li><code>server.handle</code> is a call back function that process requests for the specified endpoint.</li> <li><code>[](const request &amp;req, const response &amp;res)</code> is a lambda function that takes two arguments (<code>res</code> and <code>req</code>) which processes the incoming request and sends an appropriate response.</li> </ul> <p></p> <p>Request Method Logic</p> <pre><code>if (req.method() == \"GET\") {\n    // GET logic\n} else if (req.method() == \"POST\") {\n    // POST logic\n} else {\n    // Not supported\n}\n</code></pre> <ul> <li><code>req.method()</code> returns the type of the request (GET, POST, PUT, DELETE)</li> </ul> <p></p> <p>Handling GET Requests</p> <p>When the client sends a GET request to the <code>/api/users</code> endpoint, the server will respond by retrieving and returning the list of users (<code>userData</code>) in JSON format.</p> <pre><code>if (req.method() == \"GET\") {\n    Json::StreamWriterBuilder writer;\n    std::string jsonString = Json::writeString(writer, getUsersJson()) + \"\\n\";\n\n    res.write_head(200);\n    res.end(jsonString);\n}\n</code></pre> <ul> <li>The <code>StreamWriterBuilder</code> and <code>Json::writeString</code> are used to convert the JSON object into a string.</li> <li><code>res.write_head(200)</code> Sends an HTTP 200 OK response.</li> <li><code>res.end(jsonString)</code> Sends the JSON data to the client.</li> </ul> <p></p> <p>To test the endpoint, use the following cURL command:</p> <pre><code>curl --http2-prior-knowledge -X GET http://localhost:3000/users\n</code></pre> <p>Output should be:</p> <pre><code>[\n    {\n        \"id\": 753951,\n        \"name\": \"Lyn\"\n    },\n    {\n        \"id\": 574269,\n        \"name\": \"Gojo\"\n    }\n]\n</code></pre> <p></p> <p>Handling POST Requests</p> <p>The POST request allows adding a new user by specifying their id and name.</p> <pre><code>req.on_data([&amp;res](const uint8_t *data, std::size_t len) {\n    std::string body(reinterpret_cast&lt;const char *&gt;(data), len);\n    Json::CharReaderBuilder reader;\n    Json::Value requestBody;\n    std::string errors;\n    std::istringstream iss(body);\n\n    if (Json::parseFromStream(reader, iss, &amp;requestBody, &amp;errors)) {\n        if (!(requestBody.isMember(\"name\") &amp;&amp; requestBody.isMember(\"id\"))) {\n            res.write_head(404);\n            res.end(\"{\\\"error\\\": \\\"Key not found\\\"}\\n\");\n        } else {\n            int userID = requestBody[\"id\"].asInt();\n            std::string userName = requestBody[\"name\"].asString();\n            userData[userID] = userName;\n\n            Json::Value responseJson;\n            responseJson[\"message\"] = \"User added successfully\";\n            responseJson[\"id\"] = userID;\n            responseJson[\"name\"] = userName;\n\n            Json::StreamWriterBuilder writer;\n            std::string jsonResponse = Json::writeString(writer, responseJson) + \"\\n\";\n\n            res.write_head(201);\n            res.end(jsonResponse);\n            }\n\n    } else {\n        res.write_head(400);\n        res.end(R\"({\"error\": \"Invalid JSON\"})\");\n    }\n}\n</code></pre> <ul> <li>The server reads the raw body of the POST request using the <code>on_data</code> callback. (passes <code>&amp;res</code> as a capture).</li> <li>Then, the body is parsed using the <code>Json::parseFromStream()</code> function.</li> </ul> <p></p> <p>You can test will <code>cURL</code> as well</p> <p>(successful)</p> <pre><code>curl --http2-prior-knowledge -X POST http://localhost:3000/users -d '{\"id\":123456, \"name\":\"Satoru\"}'\n</code></pre> <pre><code>{\n    \"message\": \"User added successfully\",\n    \"id\": 123456,\n    \"name\": \"Satoru\"\n}\n</code></pre> <p>(invalid key)</p> <pre><code>curl --http2-prior-knowledge -X POST http://localhost:3000/users -d '{\"ids\":123456, \"names\":\"Satoru\"}'\n</code></pre> <pre><code>{\"error\": \"Key not found\"}\n</code></pre> <p></p> <p>Handling Invalid Requests</p> <p>When an invalid type of request was sent, the server will send an error message.</p> <pre><code>else {\n    res.write_head(405);\n    res.end(\"{\\\"error\\\": \\\"Method not allowed\\\"}\\n\");\n}\n</code></pre> <p></p> <p>You can also test this with <code>cURL</code>:</p> <pre><code>curl --http2-prior-knowledge -X PUT http://localhost:3000/users\n</code></pre> <pre><code>{\"error\": \"Method not allowed\"}\n</code></pre>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#define-apiusersuserid-endpoint","title":"Define /api/users/{userID} Endpoint","text":"<p>The <code>/api/users/{userID}</code> endpoint allows the server to handle user-specific requests, where <code>{userID}</code> is a dynamic path parameter representing the ID of the user. Caller can make GET, PUT, and DELETE requests for this endpoint.</p> <p>The code is very similar to above.</p> <pre><code>server.handle(\"/users/\", [](const request &amp;req, const response &amp;res) {\n    std::string path = req.uri().path;\n    std::string userIDStr = path.substr(path.find_last_of('/') + 1);\n    int userID = std::stoi(userIDStr);\n\n    if (req.method() == \"GET\") {\n        // curl --http2-prior-knowledge -X GET http://localhost:3000/users/753951\n        // curl --http2-prior-knowledge -X GET http://localhost:3000/users/000000\n\n        if (userData.find(userID) != userData.end()) {\n            Json::Value userJson;\n            userJson[\"id\"] = userID;\n            userJson[\"name\"] = userData[userID];\n\n            Json::StreamWriterBuilder writer;\n            std::string jsonString = Json::writeString(writer, userJson) + \"\\n\";\n\n            res.write_head(200);\n            res.end(jsonString);\n        } else {\n            res.write_head(404);\n            res.end(\"{\\\"error\\\": \\\"User not found\\\"}\\n\");\n        }\n\n    } else if (req.method() == \"PUT\") {\n        // curl --http2-prior-knowledge -X PUT http://localhost:3000/users/753951 -d '{\"name\":\"Lyn Jeong\"}'\n        // curl --http2-prior-knowledge -X PUT http://localhost:3000/users/000000 -d '{\"name\":\"Geto\"}'\n        // curl --http2-prior-knowledge -X PUT http://localhost:3000/users/753951 -d '{\"names\":\"Lyn Jeong\"}'\n\n        req.on_data([&amp;res, userID](const uint8_t *data, std::size_t len) {\n            std::string body(reinterpret_cast&lt;const char *&gt;(data), len);\n            Json::CharReaderBuilder reader;\n            Json::Value requestBody;\n            std::string errors;\n            std::istringstream iss(body);\n\n            if (Json::parseFromStream(reader, iss, &amp;requestBody, &amp;errors)) {\n                if (!requestBody.isMember(\"name\")) {\n                    res.write_head(404);\n                    res.end(\"{\\\"error\\\": \\\"Key not found\\\"}\\n\");\n                } else {\n                    if (userData.find(userID) != userData.end()) {\n                        userData[userID] = requestBody[\"name\"].asString();\n\n                        Json::Value responseJson;\n                        responseJson[\"message\"] = \"User updated successfully\";\n                        responseJson[\"id\"] = userID;\n                        responseJson[\"name\"] = userData[userID];\n\n                        Json::StreamWriterBuilder writer;\n                        std::string jsonResponse = Json::writeString(writer, responseJson) + \"\\n\";\n\n                        res.write_head(200);\n                        res.end(jsonResponse);\n                    } else {\n                        res.write_head(404);\n                        res.end(\"{\\\"error\\\": \\\"User not found\\\"}\\n\");\n                    }\n                }\n            } else {\n                res.write_head(400);\n                res.end(R\"({\"error\": \"Invalid JSON\"})\");\n            }\n        });\n\n    } else if (req.method() == \"DELETE\") {\n        // curl --http2-prior-knowledge -X DELETE http://localhost:3000/users/753951\n        // curl --http2-prior-knowledge -X DELETE http://localhost:3000/users/000000\n\n        if (userData.find(userID) != userData.end()) {\n            std::string userName = userData[userID];\n\n            if (userData.erase(userID) &gt; 0) {\n                res.write_head(200);\n                res.end(\"{\\\"message\\\": \\\"User \" + userName + \" deleted successfully\\\"}\\n\");\n            } else {\n                res.write_head(404);\n                res.end(\"{\\\"error\\\": \\\"Failed to delete \" + userName + \"\\\"}\\n\");\n            }\n\n        } else {\n            res.write_head(404);\n            res.end(\"{\\\"error\\\": \\\"User not found\\\"}\\n\");\n        }\n    } else {\n        // curl --http2-prior-knowledge -X POST http://localhost:3000/users/753951 -d '{\"id\":789012, \"name\":\"Geto\"}'\n\n        res.write_head(405);\n        res.end(\"{\\\"error\\\": \\\"Method not allowed\\\"}\\n\");\n    }\n});\n</code></pre>"},{"location":"C%2B%2B/Simple%20REST%20API%20Implementation%20in%20C%2B%2B%20with%20nghttp2%20189011ff45b980a49b60c4a7cd6d2c2c/#3-api-endpoint-summary","title":"3. API Endpoint Summary","text":"<p>The API has two main endpoints for managing users: <code>/api/users</code> and <code>/api/users/{userID}</code>. </p> Endpoint Method Description Example cURL Command <code>/api/users</code> GET Retrieve all users as a JSON array. <code>curl --http2-prior-knowledge -X GET &lt;http://localhost:3000/api/users</code> POST Add a new user with <code>id</code> and <code>name</code>. <code>curl --http2-prior-knowledge -X POST &lt;http://localhost:3000/api/users&gt; -d '{\"id\":123456, \"name\":\"Satoru\"}'</code> <code>/api/users/{userID}</code> GET Retrieve a specific user by <code>userID</code>. <code>curl --http2-prior-knowledge -X GET &lt;http://localhost:3000/users/753951</code> PUT Update the user\u2019s name by <code>userID</code>. <code>curl --http2-prior-knowledge -X PUT &lt;http://localhost:3000/users/753951&gt; -d '{\"name\":\"Lyn Jeong\"}'</code> DELETE Remove a specific user by <code>userID</code>. <code>curl --http2-prior-knowledge -X DELETE &lt;http://localhost:3000/users/753951</code> Any unsupported method Any Return <code>405 Method Not Allowed</code> error. \u2014"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/","title":"Fast Logging for C++ with spdlog","text":""},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#1-installation","title":"1. Installation","text":"<p>Install <code>spdlog</code> and the dependencies <code>fmt</code> and <code>cmake</code>. You can also install the header-only version or the compiled version separately instead of using the package manager.</p> <pre><code>brew install spdlog\n</code></pre> <pre><code>brew install fmt\n</code></pre> <pre><code>brew install cmake\n</code></pre>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#2-include-headers","title":"2. Include Headers","text":"<p><code>spdlog/spdlog.h</code> and <code>spdlog/sinks/basic_file_sink.h</code> are key header files of the <code>spdlog</code> library.</p> <pre><code>#include &lt;spdlog/spdlog.h&gt;\n#include &lt;spdlog/sinks/basic_file_sink.h&gt;\n</code></pre>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#spdlogh","title":"spdlog.h","text":"<p>This header file provides the core feature of the library. You can:</p> <ul> <li>Call basic logging functions like <code>spdlog::info</code>, <code>spdlog::warn</code>, <code>spdlog::error</code>, etc.</li> <li>Set the level of the log message (<code>trace</code>, <code>debug</code>, <code>info</code>, etc)</li> <li>Create an global logger.</li> <li>Format the log message.</li> </ul> <p>example:</p> <pre><code>#include &lt;spdlog/spdlog.h&gt;\n\nint main() {\n    spdlog::info(\"This is an info message.\");\n    spdlog::warn(\"This is a warning message.\");\n    spdlog::error(\"This is an error message.\");\n}\n</code></pre>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#basic_file_sinkh","title":"basic_file_sink.h","text":"<p>This header file provides the \u201csink\u201d functionality needed to output logs to a file. In <code>spdlog</code>, the log output target is defined as a \u201csink,\u201d allowing logs to be sent to different destinations like console, files, or networks.</p> <p>Sink refers to the output target that determines where log messages should be sent. It acts as the \u201cexit point\u201d where log messages flow.</p> <ul> <li>Sink decides whether log messages are recorded to the console, files, etc.</li> <li>A single logger can have 1+ sinks \u2192 same log messages can be sent to multiple destinations simultaneously.</li> <li>Each Sink operates independently \u2192 you can format the messages and filter them for each sink.</li> </ul> <p>example:</p> <pre><code>#include &lt;spdlog/spdlog.h&gt;\n#include &lt;spdlog/sinks/basic_file_sink.h&gt;\n\nint main() {\n    auto file_logger = spdlog::basic_logger_mt(\"file_logger\", \"logs/example.log\");\n    file_logger-&gt;info(\"This message will be written to the file.\");\n    file_logger-&gt;warn(\"This is a warning logged to the file.\");\n}\n</code></pre> <ul> <li>The type for <code>file_logger</code> is <code>std::shared_ptr&lt;spdlog::logger&gt;</code></li> <li>Since it\u2019s a smart pointer, you can pass it as a parameter.</li> </ul>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#example-code","title":"Example Code","text":"<pre><code>#include &lt;spdlog/spdlog.h&gt;\n#include &lt;spdlog/sinks/basic_file_sink.h&gt;\n\nint main() {\n    spdlog::info(\"Hello, spdlog!\");\n\n    spdlog::debug(\"This is a debug message\"); \n    spdlog::warn(\"Warning: Something might be wrong\");\n    spdlog::error(\"Error: Something went wrong!\");\n    spdlog::critical(\"Critical issue encountered!\");\n\n    auto file_logger = spdlog::basic_logger_mt(\"file_logger\", \"logs/example.log\");\n    file_logger-&gt;info(\"This message is logged to a file!\");\n\n    spdlog::set_pattern(\"[%Y-%m-%d %H:%M:%S] [%^%l%$] %v\");\n    spdlog::info(\"This is a log message with a custom format!\");\n\n    spdlog::set_level(spdlog::level::debug);\n    spdlog::debug(\"Debug messages are now visible!\");\n\n    return 0;\n}\n</code></pre> <p>I created <code>example.cpp</code> with the code above, and used the <code>Makefile</code> below. Make sure to modify your <code>spdlog</code>, <code>fmt</code> paths. You can check using <code>brew info &lt;libName&gt;</code>.</p> <pre><code>CXX = g++\n\nCXXFLAGS = -std=c++17 -I/opt/homebrew/Cellar/spdlog/1.15.0_1/include -I/opt/homebrew/Cellar/fmt/11.1.3/include\nLDFLAGS = -L/opt/homebrew/Cellar/spdlog/1.15.0_1/lib -L/opt/homebrew/Cellar/fmt/11.1.3/lib -lspdlog -lfmt\n\nTARGET = app\n\nSRC = example.cpp\n\n$(TARGET): $(SRC)\n    $(CXX) $(CXXFLAGS) $(SRC) -o $(TARGET) $(LDFLAGS)\n\nclean:\n    rm -f $(TARGET)\n</code></pre> <p>Build and run the executable.</p> <pre><code>make\n./app\n</code></pre> <p>You should see the following output on the terminal, and also see that <code>example.log</code> was created.</p> <p></p> <p></p>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#logging","title":"Logging","text":"<pre><code>spdlog::info(\"Hello, spdlog!\");\nspdlog::debug(\"This is a debug message\");\nspdlog::warn(\"Warning: Something might be wrong\");\nspdlog::error(\"Error: Something went wrong!\");\nspdlog::critical(\"Critical issue encountered!\");\n</code></pre> <ul> <li>Log messages in different levels are printed to the console.</li> <li>The basic level is set to info \u2192 if you log debug, you won\u2019t be able to see it.</li> </ul>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#file-logging","title":"File Logging","text":"<pre><code>auto file_logger = spdlog::basic_logger_mt(\"file_logger\", \"logs/example.log\");\nfile_logger-&gt;info(\"This message is logged to a file!\");\n</code></pre> <ul> <li><code>spdlog::basic_logger_mt</code> creates a file logger named \u201cfile_logger\". It saves the logs in to <code>logs/example.log</code> (<code>spdlog</code> creates it if it doesn\u2019t exist).</li> <li>Since <code>spdlog::basic_logger_mt</code> is a shared pointer, you can call the <code>info</code> method and log the message to the file.</li> </ul>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#formatting","title":"Formatting","text":"<pre><code>spdlog::set_pattern(\"[%Y-%m-%d %H:%M:%S] [%^%l%$] %v\");\nspdlog::info(\"This is a log message with a custom format!\");\n</code></pre> <ul> <li> <p><code>spdlog::set_pattern</code> sets the format for all the logs.</p> format desc <code>%Y-%m-%d %H:%M:%S</code> date and time <code>%^%l%$</code> output log levels in colours.  (<code>%I</code>: log level, <code>%^</code> / <code>%$</code>: start / end colour) <code>%v</code> log message content </li> </ul>"},{"location":"C%2B%2B/spdlog%20-%20Fast%20Logging%20for%20C%2B%2B%20188011ff45b980fbaf27d4fbf13f449d/#set-log-level","title":"Set Log Level","text":"<pre><code>spdlog::set_level(spdlog::level::debug);\nspdlog::debug(\"Debug messages are now visible!\");\n</code></pre> <ul> <li><code>spdlog::set_level</code> sets the log level (global)</li> </ul>"},{"location":"Commands/Change%20Hostname%20on%20Linux%20with%20CLI%20181011ff45b980e38a50eea810ec0493/","title":"Change Hostname on Linux with CLI","text":""},{"location":"Commands/Change%20Hostname%20on%20Linux%20with%20CLI%20181011ff45b980e38a50eea810ec0493/#1-check-your-current-hostname","title":"1. Check your current hostname","text":"<p>Check what your current hostname is with <code>hostnamectl</code> or <code>hostname</code> command.</p> <p></p>"},{"location":"Commands/Change%20Hostname%20on%20Linux%20with%20CLI%20181011ff45b980e38a50eea810ec0493/#2-change-hostname","title":"2. Change hostname","text":"<p>Change the hostname with <code>hostnamectl</code> command.</p> <pre><code>hostnamectl set-hostname new-hostname\n</code></pre> <p>I want to change mine to <code>lyn</code>, so </p> <pre><code>hostnamectl set-hostname lyn\n</code></pre>"},{"location":"Commands/Change%20Hostname%20on%20Linux%20with%20CLI%20181011ff45b980e38a50eea810ec0493/#3-confirm-change","title":"3. Confirm change","text":"<pre><code>hostname\n</code></pre> <pre><code>hostnamectl\n</code></pre>"},{"location":"Commands/Change%20Hostname%20on%20Linux%20with%20CLI%20181011ff45b980e38a50eea810ec0493/#4-optional-set-pretty-hostname","title":"4. (Optional) Set pretty hostname","text":"<p>A pretty hostname is the name displayed to the user, not the name used by other computers on a network. Computers identify each other using the static hostname. </p> <p>To update the pretty hostname of a machine, you can use the <code>hostnamectl</code> command with the <code>--pretty</code> option.</p> <pre><code>hostnamectl set-hostname new-hostname --pretty\n</code></pre>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/","title":"DBSCAN","text":""},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#problem-statement","title":"Problem Statement","text":"<p>Given:</p> <ul> <li>A continuously updated set of 2D points \\(P = \\{p_1, p_2, \\dots, p_n\\}\\) representing the locations (latitude, longitude) of people.</li> <li>A fixed radius \\(r = 100\\)  meters.</li> </ul> <p>Objective:</p> <ul> <li>Continuously identify the coordinate \\(c\\) **such that the circle of radius 100\u202fm centred at \\(c\\)contains the maximum number of points from P. The solution must be updated in near real time as new points are added (or removed).</li> </ul>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#dbscan_1","title":"DBSCAN","text":"<ul> <li>Density Based Spatial Clustering of Applications with Noise</li> <li>Clustering algorithm used in ML to partition data into clusters based on their distance to other points.</li> <li>Effective at identifying and removing noise (outliers) in a data set.</li> <li>Complexity depends on how the nearest neighbour search is implemented.<ul> <li>Brute Force Search: \\(O(n^2)\\)</li> <li>Tree (k-dimensional tree, ball tree, r-tree): \\(O(n \\: logn)\\)</li> <li>scikit-learn allows diff searching algorithms</li> </ul> </li> <li>Key parameters:<ul> <li>eps: radius of the \u201cneighbourhood\u201d</li> <li>MinPts: minimum # of points required within the eps radius to be considered as a core point.</li> </ul> </li> <li>If esp is too high \u21d2 a lot of points are considered as 1 cluster</li> <li>If esp is too low \u21d2 points may be divided in to too many clusters and a lot of them could be considered as outliers.</li> <li>If minPts is too high \u21d2 cut off is too high so there might be less clusters and a lot of outliers.</li> <li>If minPts is too low \u21d2 outliers can be considered as clusters</li> </ul>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#procedure","title":"Procedure","text":"<ol> <li> <p>Parameter: radius and the min. neighbour points</p> </li> <li> <p>Determine if this point is a core point or not</p> <ul> <li>if the radius was 10m and the min neighbour points was 4, a point that has at least 4 other points within the 10m radius circle (can be touching the circle, doesn\u2019t have to be fully inside), it is considered a core point. </li> </ul> </li> <li> <p>Randomly pick a core point and put it into cluster 1. And in the neighbour points, if there are other core points, put them into cluster 1 as well. Do not include the non core points. Repeat until there are no more core points that can be extended to.</p> <p></p> </li> <li> <p>Add the non core points that are neighbours of the core points that are classified as cluster 1. </p> <p></p> </li> <li> <p>Other core points that was not \u201cconnected\u201d to the core points classified as cluster 1 becomes a new cluster, ie cluster 2. Repeat the step until there are no more core points left.</p> <p></p> </li> <li> <p>After grouping with the core points, if there are non core points left, they are classified as outliers.</p> </li> </ol>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#pseudocode","title":"Pseudocode","text":"<pre><code>DBSCAN(dataset, eps, MinPts) {\n    C = 1 # cluster index\n\n    for each unvisited point p in dataset {\n        mark p as visited\n\n        # find all the points within a distance eps from point p\n        Neighbours N = find the neigbouring points of p\n\n        if |N| &gt;= MinPts:\n            N = N U newN # expand the neigbours (=&gt; add the neigbours neighbour if they're core points)\n            if newP is not a member of any cluster:\n                add newP to cluster C # here the newP is the neighbours)\n    }\n}\n</code></pre> Algorithm Implementation with Python <pre><code>import numpy as np\n\ndef find_neighbours(data, point_idx, eps):\n    neighbours = []\n    for i in range(len(data)):\n        if np.linalg.norm(data[point_idx] - data[i]) &lt;= eps:\n            neighbours.append(i)\n    return neighbours\n\ndef dbscan(data, eps, min_pts):\n    clusters = [-1] * len(data)\n    cluster_id = 0\n\n    for i in range(len(data)):\n        if clusters[i] != -1:\n            continue\n\n        neighbours = find_neighbours(data, i, eps)\n\n        if len(neighbors) &lt; min_pts:\n            clusters[i] = 0\n            continue\n\n        cluster_id += 1\n        clusters[i] = cluster_id\n        queue = neighbours\n\n        while queue:\n            j = queue.pop(0)\n\n            if clusters[j] == 0:  \n                clusters[j] = cluster_id\n\n            if clusters[j] != -1:\n                continue\n\n            clusters[j] = cluster_id\n            new_neighbours = find_neighbours(data, j, eps)\n\n            if len(new_neighbors) &gt;= min_pts:\n                queue.extend(new_neighbors)\n\n    return clusters\n\ndata = np.array([[1, 2], [2, 2], [3, 2], [8, 7], [8, 8], [25, 80]])\neps = 2\nmin_pts = 2\n\nclusters = dbscan(data, eps, min_pts)\nprint(clusters)\n</code></pre>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#clustering","title":"Clustering","text":"<pre><code>import matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.datasets import make_blobs\n\nX, _ = make_blobs(n_samples=300, centers=3, cluster_std=0.5, random_state=0)\n\ndb = DBSCAN(eps=0.3, min_samples=5).fit(X)\nlabels = db.labels_\n\nprint(labels)\n\nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', edgecolors='k')\nplt.title(\"DBSCAN Clustering\")\nplt.show()\n</code></pre>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#find-the-densest-cluster","title":"Find the Densest Cluster","text":"<ul> <li>Calculates the centre point of each cluster then counts the number of points inside.</li> </ul> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.datasets import make_blobs\nfrom scipy.spatial import distance\n\nX, _ = make_blobs(n_samples=300, centers=3, cluster_std=0.5, random_state=0)\n\ndb = DBSCAN(eps=0.3, min_samples=5).fit(X)\nlabels = db.labels_\n\nunique_labels = set(labels) - {-1} \ncenters = []\n\nfor l in unique_labels:\n    mask_bool = (labels == l)\n    cluster_points = X[mask_bool]\n\n    x_min = np.min(cluster_points[:, 0])\n    x_max = np.max(cluster_points[:, 0])\n    y_min = np.min(cluster_points[:, 1])\n    y_max = np.max(cluster_points[:, 1])\n\n    center_pt = np.array([(x_min + x_max) / 2, (y_min + y_max) / 2])\n    centers.append((l, center_pt))\n\nradius = 1\npt_counts = {}\n\nfor l, c in centers:\n    count = np.sum(distance.cdist([c], X, 'euclidean')[0] &lt;= radius)\n    pt_counts[l] = count\n    print(f\"cluster {l}: {c} [{count}]\")\n\nmax_dens_cluster = max(pt_counts, key=pt_counts.get)\nmax_dens_pt = dict(centers)[max_dens_cluster]\n\nplt.figure(figsize=(8, 6))     \nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', edgecolors='k')\n\nfor l, c in centers:\n    markerC = 'red' if l != max_dens_cluster else 'blue'\n    plt.scatter(c[0], c[1], c=markerC, marker='X', s=200, label=f\"Cluster {l}\")\n\n    circle = plt.Circle(c, radius, color=markerC, fill=False, linestyle='dashed')\n    plt.gca().add_patch(circle)\n\nplt.axis('equal')\nplt.title(\"DBSCAN Clustering - Max Density Circle\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"ML/Clustering/DBSCAN%2019e011ff45b98096b93ffb033d1bba4d/#references","title":"References","text":"<ul> <li>https://www.youtube.com/watch?v=RDZUdRSDOok&amp;ab_channel=StatQuestwithJoshStarmer</li> <li>https://www.geeksforgeeks.org/dbscan-clustering-in-ml-density-based-clustering/</li> </ul>"},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/","title":"Mean-Shift Clustering","text":""},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/#problem-statement","title":"Problem Statement","text":"<p>Given:</p> <ul> <li>A continuously updated set of 2D points \\(P = \\{p_1, p_2, \\dots, p_n\\}\\) representing the locations (latitude, longitude) of people.</li> <li>A fixed radius \\(r = 100\\)  meters.</li> </ul> <p>Objective:</p> <ul> <li>Continuously identify the coordinate \\(c\\) **such that the circle of radius 100\u202fm centred at \\(c\\)contains the maximum number of points from P. The solution must be updated in near real time as new points are added (or removed).</li> </ul>"},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/#mean-shift-clustering_1","title":"Mean-Shift Clustering","text":"<ul> <li>Centroid Based Clustering</li> <li>Unlike K-means you don\u2019t have to specify the number of clusters</li> <li>Assigns the data points to the clusters iteratively by shifting points towards the mode (\u21d2 highest density of data points in the region)</li> <li>Given a set of data points, the algorithm iteratively assigns each data point towards where the most points are at \u21d2 cluster centre</li> <li>\\(O(n^2)\\) \u21d2 not that efficient</li> <li>Key parameters;<ul> <li>Bandwidth: neighbourhood size</li> </ul> </li> <li>Bandwidth is too high \u21d2 less clusters that is very huge</li> <li>Bandwidth is too low \u21d2 too many clusters that are small (may not even be clusters)</li> </ul>"},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/#procedure","title":"Procedure","text":"<ol> <li> <p>Initialize centroids. Start with a set of data points as candidate centroids. (all points are centroids) (?? can this be changed?)</p> </li> <li> <p>Shift towards the dense part. For each centroid, compute the mean of all points within a given bandwidth \u2192 move the centroid towards this mean. Repeat until it converges (similar to previous point).</p> <p></p> </li> <li> <p>Merge close centroids. When they stop moving significantly, similar ones are merged.</p> </li> <li> <p>Assign points to clusters (each convergence is a corresponding cluster). Each data point is assigned to the closest centroid.</p> <p></p> </li> </ol>"},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/#clustering","title":"Clustering","text":"<pre><code>import matplotlib.pyplot as plt\nfrom sklearn.cluster import MeanShift, estimate_bandwidth\nfrom sklearn.datasets import make_blobs\n\nX, _ = make_blobs(n_samples=300, centers=3, cluster_std=0.5, random_state=0)\n\nbandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=100)\n\nms = MeanShift(bandwidth=bandwidth)\nms.fit(X)\nlabels = ms.labels_\ncluster_centers = ms.cluster_centers_\n\nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', alpha=0.7)\nplt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], c='red', marker='X', s=200, label=\"Centroids\")\nplt.legend()\nplt.title(\"Mean Shift Clustering\")\nplt.show()\n</code></pre>"},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/#find-the-densest-cluster","title":"Find the Densest Cluster","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import MeanShift, estimate_bandwidth\nfrom sklearn.datasets import make_blobs\nfrom scipy.spatial import distance\n\nX, _ = make_blobs(n_samples=300, centers=3, cluster_std=0.5, random_state=0)\n\nbandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=100)\nms = MeanShift(bandwidth=bandwidth)\nms.fit(X)\nlabels = ms.labels_\ncenters = ms.cluster_centers_\n\nradius = 1\npt_counts = {}\n\nfor l, c in enumerate(centers):\n    count = np.sum(distance.cdist([c], X, 'euclidean')[0] &lt;= radius)\n    pt_counts[l] = count\n    print(f\"cluster {l}: {c} [{count}]\")\n\nmax_dens_cluster = max(pt_counts, key=pt_counts.get)\nmax_dens_pt = centers[max_dens_cluster]\n\nplt.figure(figsize=(8, 6))\nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')\n\nfor l, c in enumerate(centers):\n    markerC = 'red' if l != max_dens_cluster else 'blue'\n    plt.scatter(c[0], c[1], c=markerC, marker='X', s=200, label=f\"cluster {l}\")\n\n    circle = plt.Circle(c, radius, color=markerC, fill=False, linestyle='dashed')\n    plt.gca().add_patch(circle)\n\nplt.axis('equal')\nplt.title(\"Mean Shift Clustering - Max Density Circle\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"ML/Clustering/Mean-Shift%20Clustering%2019e011ff45b9803c83d2e0856dbeaada/#references","title":"References","text":"<ul> <li>https://www.youtube.com/watch?v=Evc53OaDTFc&amp;ab_channel=Udacity</li> <li>https://www.youtube.com/watch?v=dNANpVZnIfA</li> <li>https://www.geeksforgeeks.org/ml-mean-shift-clustering/</li> </ul>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/","title":"Hopfield Neural Network","text":""},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#implementation-demo","title":"Implementation &amp; Demo","text":"<p>https://github.com/slynj/hopfield-neural-network</p>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#demo-with-corrupted-images","title":"Demo with Corrupted Images","text":"<p>Run <code>train_img.py</code></p> <p></p> <p></p>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#demo-with-simple-matrix","title":"Demo with Simple Matrix","text":"<p>Run <code>train_test.py</code></p> Training Sync Async"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#introduction","title":"Introduction","text":"<ul> <li>Invented by Dr John J. Hopfied, consists of 1 layer of \\(N\\) fully connected recurrent neurons.</li> <li>Type of recurrent neural network (RNN).</li> <li>One of the earliest conceptualization of biological neural networks.</li> <li>Designed to remember patterns and retrieve them when given incomplete/noisy data.<ul> <li>Brain inspired memory system \u21d2 can recall complete memories from partial hints (like how you can recognize a blurry face of a friend and read horrible handwritings)</li> </ul> </li> <li>Generally used in associative memory/optimization tasks.</li> </ul>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#discrete-hopfield-network","title":"Discrete Hopfield Network","text":"<ul> <li>Fully connected neurons \u2192 every neuron is connected to every other neurons</li> <li>Neuron states \u2192 Bipolar (-1, 1)</li> <li>Symmetric Weights \u2192  \\(w_{ij} = w_{ji}\\) , no self-connections ( \\(w_{ii} = 0\\) )<ul> <li>the connection weight between 2 neurons is the same in both directions (\\(w_{ij} = w_{ji}\\)).</li> <li>Also, weight to itself is 0 (\\(w_{ii}=0\\)). (\\(w_{ij}\\) is weight associated with the connection between the \\(i\\)th and the \\(j\\)th neuron)</li> </ul> </li> <li>Each neuron has an inverting and a non-inverting output.<ul> <li>inverting: passes on the oppposite state as it receives (1 \u21d2 -1, -1 \u21d2 1)</li> <li>non-inverting: passes on the same state as it receives</li> </ul> </li> <li>Associative (Hebbian) learning</li> <li>Neurons update themselves based on other neuron\u2019s output</li> </ul>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#structure-architecture","title":"Structure &amp; Architecture","text":"<ul> <li>\\(x_1, x_2, \\cdots, x_n\\): input to \\(n\\) given neurons</li> <li>\\(y_1, y_2, \\cdots, y_n\\): outputs from \\(n\\) given neurons</li> <li>Since they\u2019re fully connected, output of each neurons (\\(y_1,y_2, \\cdots y_n\\)) are inputs to the rest of the neurons excluding itself.</li> </ul>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#energy-function","title":"Energy Function","text":"<ul> <li>Hopfield network is an energy based model.</li> <li>When the network receives the corrupted pattern, it updates the neurons iteratively to minimize the energy \u21d2 at the end converge to the closest stored pattern.</li> <li>The network\u2019s goal is to minimize the value of the energy function \u21d2 where the energy minimizes is what the saved pattern is (associated memory).</li> <li>So even if the input is disrupted or not complete, it tries to reach the pattern \u21d2 converges to the local minima.</li> <li>\\(E = -\\frac{1}{2} \\sum_{i \\neq j} w_{ij} s_i s_j + \\sum_i \\theta_i s_i\\)<ul> <li>\\(s_i\\) : neuron \\(i\\)\u2019s current state (-1/1 or 0/1)</li> <li>\\(w_{ij}\\) : neuron \\(i\\)  and \\(j\\)\u2019s weight (symm.)</li> <li>\\(\\theta\\) : threshold of neuron \\(i\\) (determines whether the neuron will be activated (1) or deactivated (-1) based on the total input it receives from other neurons.)</li> </ul> </li> </ul>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#hebbian-learning","title":"Hebbian Learning","text":"<ul> <li>Learning rule used to store the pattern \u21d2 calculate the weights.</li> <li>Core idea: If 2 neurons activate simultaneously, their synaptic connection strengthens (ie. heavier weight).</li> <li>\\(w_{ij} = \\frac{1}{N} \\sum_{\\mu=1}^{P} \\xi_i^{\\mu} \\xi_j^{\\mu}\\)<ul> <li>\\(N\\) : # of neurons</li> <li>\\(P\\) : # of patterns to store</li> <li>\\(\\xi_i^{\\mu}\\)\u00a0: neuron \\(i\\)\u2019s state on the \\(\\mu\\)th pattern<ul> <li>\\(\u03be\\) : state / state pattern</li> </ul> </li> </ul> </li> <li> <p>\u201cNeurons that fire together wire together\u201d</p> </li> <li> <p>If \\(\\xi_i^{\\mu} = 1\\) and \\(\\xi_j^{\\mu} = 1\\), \\(\\xi_i^{\\mu} \\xi_j^{\\mu} = 1\\)</p> </li> <li> <p>If one of them is -1, \\(\\xi_i^{\\mu} \\xi_j^{\\mu} = -1\\)</p> <ul> <li>\u21d2 when they\u2019re in the same states together, the corresponding weight increases (vice versa).</li> </ul> </li> <li> <p>Simple, and can store multiple patterns.</p> </li> <li>However overlapping patterns can cause errors and it does not forget or adapt new info.</li> </ul>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#training-algorithm","title":"Training Algorithm","text":"<ol> <li>Initialize the network<ul> <li>determine the # of stored patterns</li> <li>get the # of neurons in each pattern</li> <li>init the weight matrix</li> </ul> </li> <li>Compute the Average Neuron Activation(rho; \\(\\rho\\) )<ul> <li>\\(\\rho\\) : avg activation value of all neurons across all patterns<ul> <li>sum of all vals / num of vals</li> </ul> </li> <li>helps prevent one pattern from dominating the network<ul> <li>ex. network could overfit if there\u2019s a pattern with all 1s. (\\(\\rho\\) prevents it)</li> </ul> </li> <li>subtracting rho makes learning stable by prevent the network from biasing on a particular pattern. (state - rho \u2192 then used for dot product for weight calculation)</li> </ul> </li> <li>Hebbian Learning<ul> <li>for each patern in the dataset,<ol> <li>subtract rho from the pattern to center the values</li> <li>computer the outer product and add it to the weight matrix</li> </ol> </li> </ul> </li> <li>Normalize Values<ul> <li>divide the weight matrix by the number of data (not the # of vals) \u2192 prevents the weights from getting large</li> </ul> </li> </ol>"},{"location":"ML/Neural-Network/Hopfield%20Neural%20Network%201a0011ff45b98006ba09f1ae55d72527/#references","title":"References","text":"<ul> <li>https://github.com/takyamamoto/Hopfield-Network</li> <li>https://www.geeksforgeeks.org/hopfield-neural-network/</li> <li>https://link.springer.com/article/10.1007/BF00365229</li> </ul>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/","title":"Correlation Heatmap with Seaborn","text":"<p>In this guide, we\u2019ll explore how to create a correlation heatmap using Seaborn in Python. A heatmap is a powerful visualization tool that highlights important relationships between features and their connection to the target variable (y-value). We\u2019ll cover two common types: the standard heatmap and the triangular heatmap.</p> <p>The data I used is from Berlin V2X paper which collected ML dataset from multiple vehciles and radio access technologies. You can access them here if you are interested. </p>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#1-installation","title":"1. Installation","text":"<p>Import the following packages. </p> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n</code></pre>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#2-load-dataframe","title":"2. Load Dataframe","text":"<p>I created a <code>.ipynb</code> file to process things step by step. You can choose whatever you\u2019re comfortable with. </p> <p>Load the data you will visualize, and display the first few rows to see the number/types of columns you have.</p> <pre><code>data_scaled = pd.read_csv(\"../data/processed_data.csv\")\ndisplay(data_scaled.head())\n</code></pre> <p></p> <p>Here, I have 25 columns so my heatmap will be a 25 x 25.</p>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#perform-simple-preprocessing","title":"Perform Simple Preprocessing","text":"<p>Since all of the values need to be in number in order to create the heatmap, perform appropriate preprocessing.</p> <p>Run the code below to view the data types of all columns.</p> <pre><code>display(data_scaled.dtypes)\n</code></pre> <p>The <code>datarate_DL</code> column in my dataset is currently of type object, but the values are actually numerical data stored as strings. I will convert this column to a numeric type with the code below. Again, perform approriate preprocessing depeding on your dataset.</p> <pre><code>data_scaled['datarate_DL'] = pd.to_numeric(data_scaled['datarate_DL'])\n</code></pre>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#3-create-a-correlation-matrix","title":"3. Create a Correlation Matrix","text":"<p>Now create a correlation matrix between all features &amp; the y-variable.</p> <pre><code>correlation_matrix = data_scaled.corr()\n</code></pre> <p></p> <p>A correlation matrix with all the variables. This dataframe is 25 x 25.</p>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#4-generate-basic-heatmap","title":"4. Generate Basic Heatmap","text":"<p>Run the code below, and you will be able to see the most basic seaborn correlation heatmap with no modification.</p> <pre><code>sns.heatmap(correlation_matrix)\n</code></pre> <p></p>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#change-parametrs","title":"Change Parametrs","text":"<p>From here, you can change some argument variables to make it more easier to view. Refer to the official documentation for the list of parameters.</p> Parameters Desc <code>vmin</code>, <code>vmax</code> set the range of values that serve as the basis for the colormap. <code>cmap</code> sets the specific colormap we want to use. check the resource for a list of colour palettes. <code>annot</code> when set to <code>True</code>, the correlation values become visible on the coloured cells <code>cbar</code> when set to <code>False</code>, the colourbar on the side for legend disappears <p>With matplotlib, I also set the overall figure size and the title.</p> <pre><code>plt.figure(figsize=(12, 10))\nsns.heatmap(correlation_matrix, fmt=\".2f\", cmap=\"coolwarm\")\nplt.title(\"Correlation Heatmap\", fontsize=16)\nplt.show()\n</code></pre> <p></p>"},{"location":"ML/Visualization/Correlation%20Heatmap%20with%20Seaborn%2018a011ff45b980ad8f63d0cfeeb659ca/#5-generate-triangular-heatmap","title":"5. Generate Triangular Heatmap","text":"<p>Since this is a 25 x 25 heatmap with 25 variables, half of the correlations are redundant as they are identical to the other half. Additionally, the diagonal elements, representing correlations of variables with themselves, can be misleading/unnecessary in the analysis. To resolve these issues, you can generate a triangular heatmap that only displays lower half of the heatmap.</p> <p>This can be done by creating a mask. <code>get_lower_tri()</code> will only leave the lower triangle of our heatmap by masking a boolean matrix.</p> <pre><code>def get_lower_tri(corr_matrix):\n    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n    return corr_matrix.mask(mask)\n\nlower_triangle_corr = get_lower_tri(correlation_matrix)\n</code></pre> <p>Then display the heatmap as usual, and you will be able to see the lower half of it only.</p> <pre><code>plt.figure(figsize=(12, 10))\nsns.heatmap(lower_triangle_corr, cmap=\"coolwarm\", cbar=True, mask=lower_triangle_corr.isnull())\nplt.title(\"Triangle Correlation Heatmap\", fontsize=16)\nplt.show()\n</code></pre> <p></p>"}]}